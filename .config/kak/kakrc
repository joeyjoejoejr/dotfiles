add-highlighter global/ number-lines -hlcursor
add-highlighter global/ wrap
add-highlighter global/ show-matching
add-highlighter global/ show-whitespaces

# Indentation
set-option global tabstop 2
set-option global indentwidth 2

# Finding
map global normal <c-p> ': fzf-mode<ret>'

set global grepcmd 'ag --column'

# Disable clippy
set-option global ui_options ncurses_assistant=off

# Tabs to spaces
hook global InsertChar \t %{
  exec -draft h@
}

# Splits
define-command -docstring "Split vertically" sp %{
  tmux-terminal-vertical kak -c %val{session}
}

define-command -docstring "Split horizontally" vs %{
  tmux-terminal-horizontal kak -c %val{session}
}

# Ruby
hook global BufCreate .+\.html\.erb %{ set buffer filetype html }

# Scrolloff (space around cursor when scrolling) Do i want this?
# set-option global scrolloff 10,10

# Kakoune language server
eval %sh{kak-lsp --kakoune -s $kak_session}
lsp-enable
lsp-auto-hover-enable

hook global WinSetOption filetype=rust %{
  hook window BufWritePre .* lsp-formatting-sync
  map global normal \' ': enter-user-mode lsp<ret>'
}

hook global WinSetOption filetype=ruby %{
  set window lintcmd "rubocop -f emacs -c .rubocop.yml"

  hook global WinDisplay .* %{
    lint-enable
    lint
  }
  hook window BufWritePost .* lint

  set window formatcmd "rbprettier --prefer-single-quotes false --print-width 100 --stdin --parser=ruby"
  hook window BufWritePre .* format
}

hook global WinDisplay filetype=ruby %{
}

# Copy Paste
hook global NormalKey y|d|c %{ nop %sh{
  printf %s "$kak_main_reg_dquote" | pbcopy
}}
map -docstring "Paste from cliboard(before cursor)" global user P '!pbpaste<ret>'
map -docstring "Paste from cliboard(after cursor)" global user p '<a-!>pbpaste<ret>'

# Tab completion
hook global InsertCompletionShow .* %{
   try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}

hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

# Mode line
# set-option global modelinefmt %{{Error}%sh{[ $kak_opt_lsp_diagnostic_error_count -gt 0 ] && echo "$kak_opt_lsp_diagnostic_error_count"}{Default} %val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} - %val{client}@[%val{session}]}

# Expand snippets

#Plugins
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload
plug "andreyorst/fzf.kak"

plug "occivink/kakoune-snippets" config %{
    set-option -add global snippets_directories "%opt{plug_install_dir}/kakoune-snippet-collection/snippets"
    set-option global snippets_auto_expand false
    map global insert '<c-l>' "<esc>: snippets-expand-or-jump '<c-l>'<ret>"
    map global normal '<c-l>' ": snippets-expand-or-jump '<c-l>'<ret>"

    ## some other kakoune-snippets related configurations
    define-command snippets-expand-or-jump -params 1 %{
        execute-keys <backspace>
        try %{ snippets-expand-trigger %{
            set-register / "%opt{snippets_triggers_regex}\z"
            execute-keys 'hGhs<ret>'
        }} catch %{
            snippets-select-next-placeholders
        } catch %sh{
            printf "%s\n" "execute-keys -with-hooks <$1>"
        } catch %{
            echo -debug "snippets-expand-or-jump:%val{error}"
        }
    }
}
#
plug "andreyorst/kakoune-snippet-collection"

colorscheme gruvbox
